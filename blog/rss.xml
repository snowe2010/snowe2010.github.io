<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title/>
    <description/>
    <link>http://ajourneyinerrors.nfshost.com</link>
    <pubDate>2013-10-13</pubDate>
    <item>
      <title>Rewriting Sytax Highlighter</title>
      <link>http://ajourneyinerrors.nfshost.com/blog/sytaxhighlighter-and-a-rewrite</link>
      <pubDate>2013-10-13</pubDate>
      <description>&lt;p&gt;I started the tutorials section by trying to write a post about how to get Ruhoh up and running nice and quick. 
I used code sections to make things easier, and for that I had to find a good syntax highlighter. 
I didn&amp;#39;t like the way that Google&amp;#39;s PrettyPrint worked and I couldn&amp;#39;t get SyntaxHighlighter to work 
(which I later discovered was just because I didn&amp;#39;t understand javascript very well) so I went through 
a ton of different syntax highlighters until I finally learned enough JS from those that I realized 
I was an idiot when trying to use SyntaxHighlighter.&lt;/p&gt;

&lt;p&gt;As a result of all this, I&amp;#39;ve learned very well how to use Chrome&amp;#39;s javascript debugging and breakpoints. 
The better lesson is, I learned that syntax highlighting is more difficult than it looks :| 
I&amp;#39;ll try to cover some of these difficulties below.&lt;/p&gt;

&lt;p&gt;It started when I began to try and make SyntaxHighlighter highlight more things 
(for Ruby it doesn&amp;#39;t highlight the method name or the parameters). 
I thought this would be easy, because in the brushes you can just define a regex to highlight what you want. 
Yay, so all I need to do is check for def followed by a name up to a space or a parens. 
This can be done with something along the lines of this regex:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/(?&amp;lt;=def\s)(\w+\b)\??/g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Essentially all this does is find the word following def. &lt;/p&gt;

&lt;p&gt;Nope. Not that easy. Javascript doesn&amp;#39;t support positive or negative lookbehind. 
Hmm what can I do? Ok I can write a regex to just not capture the def! That can be done like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/(?:def\s)(\w+\b)\??/g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nope. No it can&amp;#39;t because even though javascript won&amp;#39;t capture that group, 
it will still match the whole thing :|, while returning a second match of just the captured group. 
This would work fine if I could somehow figure out how to return just the second match. 
Well here&amp;#39;s the code, maybe you can see the problem.&lt;/p&gt;

&lt;pre&gt;&lt;code class="brush:js"&gt;function getMatches(code, regexInfo)
{
  function defaultAdd(match, regexInfo)
  {
    return match[0];
  };

  var index = 0,
    match = null,
    matches = [],
    func = regexInfo.func ? regexInfo.func : defaultAdd
    pos = 0
    ;

  while((match = XRegExp.exec(code, regexInfo.regex, pos)) != null)
  {
    var resultMatch = func(match, regexInfo);

    if (typeof(resultMatch) == &amp;#39;string&amp;#39;)
      resultMatch = [new sh.Match(resultMatch, match.index, regexInfo.css)];

    matches = matches.concat(resultMatch);
    pos = match.index + match[0].length;
  }

  return matches;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we always return the first match, oh but wait, it looks like 
we can give it a function to return a different match! Sweet, let&amp;#39;s do that.&lt;/p&gt;

&lt;p&gt;Well this appeared to work for a few seconds, then I noticed that now even 
though stuff was highlighted properly, the word &amp;quot;def&amp;quot; was missing from every 
single definition. It was now replaced by the method name, and then part of 
the method name would repeat for no reason. What was going on. &lt;/p&gt;

&lt;p&gt;It turns out that the original writer of the plugin would pull out things 
that matched multiple times, instead of coding it in a way that didn&amp;#39;t require that. 
As it is, I&amp;#39;m stuck and my code blocks aren&amp;#39;t going to look very good for a while. &lt;/p&gt;

&lt;p&gt;Shoot. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Move to Ruhoh from Jekyll</title>
      <link>http://ajourneyinerrors.nfshost.com/blog/move-to-ruhoh-from-jekyll</link>
      <pubDate>2013-10-09</pubDate>
      <description>&lt;h3 id="toc_0"&gt;Ruhoh, a better Jekyll&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve begun a move over to the Ruhoh platform. One of the main reasons for this is because I absolutely hate the Liquid Templating system used by Jekyll. 
Ruhoh uses Moustache which seems to be a much nicer choice overall. Also Ruhoh separates everything nice and neat like. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Content&lt;/li&gt;
&lt;li&gt;Views&lt;/li&gt;
&lt;li&gt;Presentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I don&amp;#39;t need to worry about my presentation until I&amp;#39;ve actually gotten content. 
Another great this is that handling folders and links is a thousand times easier in Ruhoh. &lt;/p&gt;

&lt;p&gt;Hopefully this platform goes better than Jekyll. If not I don&amp;#39;t know what I&amp;#39;ll do.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Problems with Fig Newton, RSpec, and Cheezy's Cucumber &amp; Cheese</title>
      <link>http://ajourneyinerrors.nfshost.com/blog/fignewton-with-rspec</link>
      <pubDate>2013-06-01</pubDate>
      <description>&lt;p&gt;I use Watir-webdriver, PageObject, and several other gems 
(at the instruction of Jeff &amp;quot;Cheezy&amp;quot; Morgan), for my job. 
Currently I&amp;#39;ve been writing tests to perform some functions 
that business people have no care or need to know about. 
Because there is no need to have business rules for these tests, 
I&amp;#39;m using RSpec instead of Cucumber. I have Cucumber tests to run 
all of the business rules that the BA&amp;#39;s need to know about and RSpec 
tests for those side scripts or non-business side of things. I&amp;#39;ve also 
read up extensively on Jeff&amp;#39;s Cucumber &amp;amp; Cheese book, though I had forgotten several key points. &lt;/p&gt;

&lt;p&gt;For these tests I was trying to load Default Data for different environments, 
and therefore I was using Jeff&amp;#39;s FigNewton gem. FigNewton allows the use of 
different configuration files based on the environment the script is being run from. 
For this you need to place require &amp;#39;fig&lt;em&gt;newton&amp;#39; in the correct place and also call 
FigNewton.load(&amp;#39;local.yml&amp;#39;) with whatever file you want to load. 
If you don&amp;#39;t want to use a specific file you can leave out the line and it will 
first look for an ENV variable called FIG&lt;/em&gt;NEWTON_FILE, then if that is not found 
it will look for a file named after the hostname of the computer, and then finally 
if even that is not found it will look for a file called &amp;#39;default.yml&amp;#39;. &lt;/p&gt;

&lt;p&gt;I was getting errors telling me that it could not find the &amp;#39;default.yml&amp;#39; file 
even though I had specified the correct file in the env.rb.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is a spec_helper.rb file for RSpec that does the same job as the 
env.rb file for Cucumber. For some reason I believed that RSpec was using 
the env.rb file, which caused a lot of problems. &lt;/li&gt;
&lt;li&gt;I am also using a gem specified by Jeff called require_all. 
This gem requires all files in a directory you specify, and it was in the line 
directly above my FigNewton call. This was causing the FigNewton line to never 
get called. I&amp;#39;m fuzzy on the details right now about why, so I&amp;#39;ll update this 
post at a later time when I&amp;#39;ve figured it out.&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After moving the line &amp;quot;FigNewton.load(&amp;#39;local.yml&amp;#39;)&amp;quot; above the &amp;quot;require&lt;em&gt;all &amp;#39;lib&amp;#39;&amp;quot; line, 
and also placing it in the spec&lt;/em&gt;helper.rb file, I was finally able to use default data. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Logging My Errors</title>
      <link>http://ajourneyinerrors.nfshost.com/blog/logging-my-errors</link>
      <pubDate>2013-04-26</pubDate>
      <description>&lt;p&gt;This is the story of my life. The problems I&amp;#39;ve come across and the solutions I&amp;#39;ve used to solve them. Not just compile time errors, or problems debugging, but the relationships in my life also. This is a manifesto of the reasons I chose to do specific things, why I am the way I am, and how I deal with those around me. This is my life.  &lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
